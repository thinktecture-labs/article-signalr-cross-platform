@inject BlazorSignalRSample.Client.Services.SignalRService _signalRService
@inject BlazorSignalRSample.Client.Services.UserService _userService
<div>
    @foreach (var user in _users)
    {
        <p>@(user.name):@(user.connectionId)</p>
    }
</div>
<div class="container">
    @if (_cells.Length > 0)
    {
        @if (_users.Count > 0) 
        {
            <div>
                <div class="clearfix">
                    <div class="@CellCssClass(_cells[0])" @onclick="@(async (e) => await PlayRound(0))">@(_cells[0])</div>
                    <div class="@CellCssClass(_cells[1])" @onclick="@(async (e) => await PlayRound(1))">@(_cells[1])</div>
                    <div class="@CellCssClass(_cells[2])" @onclick="@(async (e) => await PlayRound(2))">@(_cells[2])</div>
                </div>
                <div class="clearfix">
                    <div class="@CellCssClass(_cells[3])" @onclick="@(async (e) => await PlayRound(3))">@(_cells[3])</div>
                    <div class="@CellCssClass(_cells[4])" @onclick="@(async (e) => await PlayRound(4))">@(_cells[4])</div>
                    <div class="@CellCssClass(_cells[5])" @onclick="@(async (e) => await PlayRound(5))">@(_cells[5])</div>
                </div>
                <div class="clearfix">
                    <div class="@CellCssClass(_cells[6])" @onclick="@(async (e) => await PlayRound(6))">@(_cells[6])</div>
                    <div class="@CellCssClass(_cells[7])" @onclick="@(async (e) => await PlayRound(7))">@(_cells[7])</div>
                    <div class="@CellCssClass(_cells[8])" @onclick="@(async (e) => await PlayRound(8))">@(_cells[8])</div>
                </div>
            </div>
        } else {
            <p>Waiting for a user</p>
        }
    }
</div>

@if (_gameOver)
{
    <div class="overlay">
        <div>
            winner is @(_winner)
        </div>
        <MatButton Raised="true" @onclick="ResetGame">Reset Game</MatButton>
    </div>
}

@code {
    private string[] _cells = new string[] { };
    private bool _gameOver = false;
    private string _turn = "O";
    private bool _waitForOtherUser = false;
    private string _winner = "";

    private List<Models.User> _users = new List<Models.User>();

    protected override async Task OnInitializedAsync()
    {
        _signalRService.RoundPlayed += OtherPlayRound;
        _signalRService.ResetGame += OnResetGame;
        _userService.CurrentUsers += OnUsersChanged;

        await _signalRService.InitConnectionAsync();
        await _userService.Initialize();
        InitBoard();
    }

    public string CellCssClass(string value) {
        Console.WriteLine(value);
        return value != _turn ? "cell other" : "cell";
    }

    public async Task ResetGame()
    {
        await _signalRService.ResetGameAsync();
        InitBoard();
    }

    private void InitBoard()
    {
        var result = new List<string>();
        for (var i = 0; i < 9; i++)
        {
            result.Insert(i, null);
        }
        _cells = result.ToArray();
        _turn = "O";
        _gameOver = false;
        _winner = null;
    }

    private void OnUsersChanged(object sender, Models.User[] data) 
    {
        _users = data.ToList();
        StateHasChanged();
    }

    private void OnResetGame(object sender, EventArgs data)
    {
        InitBoard();
        StateHasChanged();
    }

    private void OtherPlayRound(object sender, Services.GameEventArgs data)
    {
        Console.WriteLine("Other played round", data);
        if (!_gameOver)
        {
            if (_cells[data.Value] == null)
            {
                this._cells[data.Value] = "X";
                CheckWinner();
                if (!this._gameOver)
                {
                    _waitForOtherUser = false;
                }
            }
        }
        StateHasChanged();
    }

    private async Task PlayRound(int data)
    {
        if (!_gameOver && !_waitForOtherUser)
        {
            if (_cells[data] == null)
            {
                this._cells[data] = _turn;
                Console.WriteLine(data);
                await _signalRService.PlayRoundAsync(data);
                CheckWinner();
                if (!this._gameOver)
                {
                    _waitForOtherUser = true;
                }
            }
        }
        StateHasChanged();
    }

    private void CheckWinner()
    {
        int[][] winningOptions =
        {
            new int[] {0,1,2},
            new int[] {3,4,5},
            new int[] {6,7,8},
            new int[] {0,3,6},
            new int[] {1,4,7},
            new int[] {2,5,8},
            new int[] {0,4,8},
            new int[] {2,4,6},
        };


        foreach (var line in winningOptions)
        {
            if (_cells[line[0]] == _cells[line[1]] && _cells[line[1]] == _cells[line[2]] && _cells[line[0]] != null)
            {
                _gameOver = true;
                _winner = _cells[line[0]] == _turn ? "You Win!" : "You loose!";
                return;
            }
        }

        var occupy = 0;
        foreach (var cell in _cells)
        {
            occupy = occupy + (cell != null ? 1 : 0);
        }
        if (occupy == 9)
        {
            _gameOver = true;
            _winner = "TIE";
        }
    }

    
}