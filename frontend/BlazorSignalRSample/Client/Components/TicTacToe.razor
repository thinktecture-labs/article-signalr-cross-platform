@inject BlazorSignalRSample.Client.Services.SignalRService _signalRService

<div>
    @(_opponent)
</div>
<div class="container">
    @if (_cells.Length > 0)
    {
        @if (_gameRunning) 
        {
            <div>
                <div class="clearfix">
                    <div class="@CellCssClass(_cells[0])" @onclick="@(async (e) => await PlayRound(0))">@(_cells[0])</div>
                    <div class="@CellCssClass(_cells[1])" @onclick="@(async (e) => await PlayRound(1))">@(_cells[1])</div>
                    <div class="@CellCssClass(_cells[2])" @onclick="@(async (e) => await PlayRound(2))">@(_cells[2])</div>
                </div>
                <div class="clearfix">
                    <div class="@CellCssClass(_cells[3])" @onclick="@(async (e) => await PlayRound(3))">@(_cells[3])</div>
                    <div class="@CellCssClass(_cells[4])" @onclick="@(async (e) => await PlayRound(4))">@(_cells[4])</div>
                    <div class="@CellCssClass(_cells[5])" @onclick="@(async (e) => await PlayRound(5))">@(_cells[5])</div>
                </div>
                <div class="clearfix">
                    <div class="@CellCssClass(_cells[6])" @onclick="@(async (e) => await PlayRound(6))">@(_cells[6])</div>
                    <div class="@CellCssClass(_cells[7])" @onclick="@(async (e) => await PlayRound(7))">@(_cells[7])</div>
                    <div class="@CellCssClass(_cells[8])" @onclick="@(async (e) => await PlayRound(8))">@(_cells[8])</div>
                </div>
            </div>
        } else if (!_gameOver) {
            <p>Waiting for a user</p>
        }
    }
</div>

@if (_gameOver)
{
    <div class="overlay">
        <div>
            @(_winner)
        </div>
        <MatButton Raised="true" @onclick="@(async (e) => await ResetGame())">Reset Game</MatButton>
    </div>
}

@code {
    private string[] _cells = new string[] { };
    private bool _gameOver = false;
    private bool _gameRunning = false;
    private string _turn = "O";
    private bool _waitForOtherUser = false;
    private string _winner = "";
    private string _opponent = "";

    protected override async Task OnInitializedAsync()
    {
        _signalRService.RoundPlayed += OtherPlayRound;
        _signalRService.GameRunning += OnGameRunning;
        _signalRService.GameOver += OnGameOver;
        _signalRService.ActiveSession += OnActiveSession;

        await _signalRService.InitConnectionAsync();
        InitBoard();
    }

    public string CellCssClass(string value) {
        Console.WriteLine(value);
        return value != _turn ? "cell other" : "cell";
    }

    private void InitBoard()
    {
        var result = new List<string>();
        for (var i = 0; i < 9; i++)
        {
            result.Insert(i, null);
        }
        _cells = result.ToArray();
        _turn = "O";
        _gameOver = false;
        _winner = null;
    }

    private async Task ResetGame()
    {
        InitBoard();
        StateHasChanged();
        await _signalRService.JoinNewSession();
    }

    private void OnGameRunning(object sender, Services.GameRunningEventArgs data)
    {
        Console.WriteLine($"Game is Running: {data.Running}");
        _gameRunning = data.Running;
        _gameOver = false;
        StateHasChanged();
    }

    private void OnGameOver(object sender, Services.GameOverEventArgs data) 
    {
        if (data.WinnerId == "Tie")
        {
            _winner = "Unentschieden";
        } 
        else if (data.WinnerId == "Lost")
        {
            _winner = "Der Gegner hat die Verbindung verloren oder aufgegeben!";
        }
        else if (!String.IsNullOrWhiteSpace(data.WinnerId))
        {
            _winner = data.WinnerId == _signalRService.ConnectionId ? "Du hast gewonnen!" : "Du hast leider verloren.";
        }
        _gameOver = !String.IsNullOrWhiteSpace(data.WinnerId);
        
        StateHasChanged();
    }

    private void OnActiveSession(object sender, Services.ActiveSessionEventArgs data) 
    {
        Console.WriteLine($"Start Game: {data.Session}");
        if (data.Session != null) {
            _waitForOtherUser = data.Session.ActiveUser != _signalRService.ConnectionId;
            _opponent = data.Session.UserOne.connectionId != _signalRService.ConnectionId 
                ? data.Session.UserOne.name 
                : data.Session.UserTwo.name;
            _gameOver = false;
        }
        StateHasChanged();
    }

    private void OtherPlayRound(object sender, Services.GameEventArgs data)
    {
        Console.WriteLine("Other played round", data);
        if (!_gameOver)
        {
            if (_cells[data.Value] == null)
            {
                _cells[data.Value] = "X";
                _waitForOtherUser = false;
            }
        }
        StateHasChanged();
    }

    private async Task PlayRound(int data)
    {
        if (!_gameOver && !_waitForOtherUser)
        {
            if (_cells[data] == null)
            {
                _cells[data] = _turn;
                Console.WriteLine(data);
                await _signalRService.PlayRoundAsync(data);
                _waitForOtherUser = true;
            }
        }
        StateHasChanged();
    }
}
