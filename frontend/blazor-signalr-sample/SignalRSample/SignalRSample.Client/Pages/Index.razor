@page "/"
@inject Services.ApiService apiService
@using Microsoft.AspNetCore.SignalR.Client


<div class="connected-state @((IsConnected ? "" : "disabled"))">
    <i class="fas fa-plug"></i>
</div>

<div class="container">
    @if (cells.Length > 0)
    {
        <div>
            <div class="clearfix">
                <div class="cell" @onclick="@(async (e) => await PlayRound(0))">@(cells[0])</div>
                <div class="cell middle" @onclick="@(async (e) => await PlayRound(1))">@(cells[1])</div>
                <div class="cell" @onclick="@(async (e) => await PlayRound(2))">@(cells[2])</div>
                <br>
            </div>
            <div class="clearfix">
                <div class="cell" @onclick="@(async (e) => await PlayRound(3))">@(cells[3])</div>
                <div class="cell middle" @onclick="@(async (e) => await PlayRound(4))">@(cells[4])</div>
                <div class="cell" @onclick="@(async (e) => await PlayRound(5))">@(cells[5])</div>
                <br>
            </div>
            <div class="clearfix">
                <div class="cell" @onclick="@(async (e) => await PlayRound(6))">@(cells[6])</div>
                <div class="cell middle" @onclick="@(async (e) => await PlayRound(7))">@(cells[7])</div>
                <div class="cell" @onclick="@(async (e) => await PlayRound(8))">@(cells[8])</div>
                <br>
            </div>
        </div>
    }
</div>

@if (gameover)
{
    <div class="overlay">
        <div>
            winner is {{winner}}
        </div>
        <Button Color="Color.Primary" @onclick="ResetGame">Reset Game</Button>
    </div>                      
}




@code {
    private HubConnection _hubConnection;
    private string[] cells = new string[] { };
    private bool gameover = false;
    private string turn = "O";
    private bool WaitForOther = false;
    private string winner = "";

    private string connectedIcon = "fa-plug";

    protected override async Task OnInitializedAsync()
    {
        await ConnectToHub();
        InitBoard();
    }

    public async Task ConnectToHub()
    {
        var accessToken = await apiService.GetAccessToken();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"http://localhost:5002/notifications", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(accessToken);
            })
            .Build();

        _hubConnection.On<string>("Notifications", (data) =>
        {
            StateHasChanged();
        });

        _hubConnection.On<string>("Play", (data) =>
        {
            OtherPlayRound(Int32.Parse(data));
            StateHasChanged();
        });

        _hubConnection.On("Reset", () =>
        {
            InitBoard();
            StateHasChanged();
        });


        await _hubConnection.StartAsync();
    }

    public async Task ResetGame()
    {
        await _hubConnection.SendAsync("ResetGame");
        InitBoard();
    }

    private void InitBoard()
    {
        var result = new List<string>();
        for (var i = 0; i < 9; i++)
        {
            result.Insert(i, null);
        }
        cells = result.ToArray();
        turn = "O";
        gameover = false;
        winner = null;
    }



    public bool IsConnected =>
    _hubConnection?.State == HubConnectionState.Connected;

    private void OtherPlayRound(int data)
    {
        if (!gameover)
        {
            if (cells[data] == null)
            {
                this.cells[data] = "X";
                CheckWinner();
                if (!this.gameover)
                {
                    WaitForOther = false;
                }
            }
        }

    }

    private async Task PlayRound(int data)
    {
        if (!gameover && !WaitForOther)
        {
            if (cells[data] == null)
            {
                this.cells[data] = turn;
                await _hubConnection.SendAsync("PlayRound", $"{data}");
                CheckWinner();
                if (!this.gameover)
                {
                    WaitForOther = true;
                }
            }
        }

    }


    public void CheckWinner()
    {
        int[][] winningOptions =
        {
            new int[] {0,1,2},
            new int[] {3,4,5},
            new int[] {6,7,8},
            new int[] {0,3,6},
            new int[] {1,4,7},
            new int[] {2,5,8},
            new int[] {0,4,8},
            new int[] {2,4,6},
        };


        foreach (var line in winningOptions)
        {
            if (cells[line[0]] == cells[line[1]] && cells[line[1]] == cells[line[2]] && cells[line[0]] != null)
            {
                gameover = true;
                winner = cells[line[0]] == turn ? "You Win!" : "You loose!";
                return;
            }
        }

        var occupy = 0;
        foreach (var cell in cells)
        {
            occupy = occupy + (cell != null ? 1 : 0);
        }
        if (occupy == 9)
        {
            gameover = true;
            winner = "TIE";
        }
    }
}
