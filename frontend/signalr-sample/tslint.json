{
  "extends": "tslint:recommended",
  "rules": {
    "array-type": false,
    "arrow-parens": false,
    "deprecation": {
      "severity": "warning"
    },
    "component-class-suffix": true,
    "contextual-lifecycle": true,
    "directive-class-suffix": true,
    "directive-selector": [
      true,
      "attribute",
      "sr",
      "camelCase"
    ],
    "component-selector": [
      true,
      "element",
      "sr",
      "kebab-case"
    ],
    "import-blacklist": [
      true,
      "rxjs/Rx"
    ],
    "interface-name": false,
    "max-classes-per-file": false,
    "max-line-length": [
      true,
      140
    ],
    "member-access": false,
    "member-ordering": [
      true,
      {
        "order": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],
    "no-consecutive-blank-lines": false,
    "no-console": [
      true,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-empty": false,
    "no-inferrable-types": [
      true,
      "ignore-params"
    ],
    "no-non-null-assertion": true,
    "no-redundant-jsdoc": true,
    "no-switch-case-fall-through": true,
    "no-use-before-declare": true,
    "no-var-requires": false,
    "object-literal-key-quotes": [
      true,
      "as-needed"
    ],
    "object-literal-sort-keys": false,
    "ordered-imports": false,
    "quotemark": [
      true,
      "single"
    ],
    "trailing-comma": false,
    "no-conflicting-lifecycle": true,
    "no-host-metadata-property": true,
    "no-input-rename": true,
    "no-inputs-metadata-property": true,
    "no-output-native": true,
    "no-output-on-prefix": true,
    "no-output-rename": true,
    "no-outputs-metadata-property": true,
    "template-banana-in-box": true,
    "template-no-negated-async": true,
    "use-lifecycle-interface": true,
    "use-pipe-transform-interface": true,
    "variable-name": {
      "options": [
        "ban-keywords",
        "check-format",
        "allow-leading-underscore",
        "allow-pascal-case"
      ]
    },
    "naming-convention": [true,
      // forbid leading and trailing underscores and enforce camelCase on EVERY name. will be overridden by subtypes if needed
      {"type": "default", "format": "camelCase", "leadingUnderscore": "forbid", "trailingUnderscore": "forbid"},
      // require all global constants to be camelCase or UPPER_CASE
      // all other variables and functions still need to be camelCase
      {"type": "variable", "modifiers": ["global", "const"], "format": ["camelCase","UPPER_CASE"]},
      // override the above format option for exported constants to allow only UPPER_CASE
      {"type": "variable", "modifiers": ["export", "const"], "format": "UPPER_CASE"},
      // require exported constant variables that are initialized with functions to be camelCase
      {"type": "functionVariable", "modifiers": ["export", "const"], "format": "camelCase"},
      // allow leading underscores for unused parameters, because `tsc --noUnusedParameters` will not flag underscore prefixed parameters
      // all other rules (trailingUnderscore: forbid, format: camelCase) still apply
      {"type": "parameter", "modifiers": "unused", "leadingUnderscore": "allow"},
      // require leading underscores for private properties and methods, all other rules still apply
      {"type": "member", "modifiers": "private", "leadingUnderscore": "require"},
      // same for protected
      {"type": "member", "modifiers": "protected", "leadingUnderscore": "require"},
      // exclicitly disable the format check only for method toJSON
      {"type": "method", "filter": "^toJSON$", "format": null},
      // enforce UPPER_CASE for all public static readonly(!) properties
      {"type": "property", "modifiers": ["public", "static", "const"], "format": "UPPER_CASE"},
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      {"type": "type", "format": "PascalCase"},
      // abstract classes must have the prefix "Abstract". The following part of the name must be valid PascalCase
      {"type": "class", "modifiers": "abstract", "prefix": "Abstract"},
      // interface names must start with "I". The following part of the name must be valid PascalCase
      {"type": "interface", "prefix": "I"},
      // generic type parameters must start with "T"
      // most of the time it will only be T, which is totally valid, because an empty string conforms to the PascalCase check
      // By convention T, U and V are used for generics. You could enforce that with "regex": "^[TUV]$" and if you are care that much for performance, you could disable every other check by setting a falsy value
      {"type": "genericTypeParameter", "prefix": "T"},
      // enum members must be in PascalCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
      {"type": "enumMember", "format": "PascalCase"}
    ]
  },
  "rulesDirectory": [
    "codelyzer"
  ]
}
